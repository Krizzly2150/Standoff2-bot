using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Text.RegularExpressions;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Text.Json;
using System.IO;

namespace Standoff2BoostBot
{
    public class Program
    {
        private static string BotToken => Environment.GetEnvironmentVariable("BOT_TOKEN") ?? "8342644005:AAHTb1NDunMgtJ2dk3VZBpji5xWG9M-JgmI";
        private static string SellerUsername => Environment.GetEnvironmentVariable("SELLER_USERNAME") ?? "krizzly2150";
        private static string OrdersGroupId => Environment.GetEnvironmentVariable("ORDERS_GROUP_ID") ?? "-1002946352030";
        private static string ArchiveGroupId => Environment.GetEnvironmentVariable("ARCHIVE_GROUP_ID") ?? "-1002675852102";
        private static string ReviewsGroupId => Environment.GetEnvironmentVariable("REVIEWS_GROUP_ID") ?? "@krizzlyreviews";

        private static readonly Dictionary<long, UserState> UserStates = new();
        private static readonly Dictionary<long, DateTime> LastActiveMap = new();
        private static int orderCounter = 1;

        public static async Task Main(string[] args)
        {
            LoadOrderCounter();
            LoadUserData();

            while (true)
            {
                try
                {
                    Console.WriteLine($"üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {DateTime.Now}");

                    using var host = Host.CreateDefaultBuilder(args)
                        .ConfigureServices((context, services) =>
                        {
                            services.AddSingleton<ITelegramBotClient>(new TelegramBotClient(BotToken));
                            services.AddHostedService<BotService>();
                        })
                        .Build();

                    await host.RunAsync();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"üí• –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...");
                    await Task.Delay(30000);
                }
            }
        }

        private static void LoadOrderCounter()
        {
            if (System.IO.File.Exists("order_counter.json"))
            {
                var data = System.IO.File.ReadAllText("order_counter.json");
                orderCounter = JsonSerializer.Deserialize<int>(data);
            }
        }

        private static void SaveOrderCounter()
        {
            var data = JsonSerializer.Serialize(orderCounter);
            System.IO.File.WriteAllText("order_counter.json", data);
        }

        private static void LoadUserData()
        {
            if (System.IO.File.Exists("users.json"))
            {
                var data = System.IO.File.ReadAllText("users.json");
                var users = JsonSerializer.Deserialize<List<UserData>>(data);
                if (users != null)
                {
                    foreach (var user in users)
                    {
                        LastActiveMap[user.UserId] = user.LastActive;
                    }
                }
            }
        }

        private static void SaveUserToDatabase(long userId, string? username)
        {
            var userData = new UserData
            {
                UserId = userId,
                Username = username,
                JoinDate = DateTime.Now,
                LastActive = DateTime.Now,
                CompletedOrders = new List<CompletedOrder>()
            };

            var users = new List<UserData>();
            if (System.IO.File.Exists("users.json"))
            {
                var data = System.IO.File.ReadAllText("users.json");
                users = JsonSerializer.Deserialize<List<UserData>>(data) ?? new List<UserData>();
            }

            var existingUser = users.FirstOrDefault(u => u.UserId == userId);
            if (existingUser == null)
            {
                users.Add(userData);
            }
            else
            {
                existingUser.LastActive = DateTime.Now;
            }

            var json = JsonSerializer.Serialize(users);
            System.IO.File.WriteAllText("users.json", json);
        }

        private static ReplyKeyboardMarkup GetMainMenuKeyboard()
        {
            return new ReplyKeyboardMarkup(new[]
            {
                new[] { new KeyboardButton("üõí –ö—É–ø–∏—Ç—å –±—É—Å—Ç") },
                new[] { new KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), new KeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã") }
            })
            {
                ResizeKeyboard = true
            };
        }

        private static async Task SendWelcomeMessage(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var welcomeText = @"üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É—Å—Ç-—Å–µ—Ä–≤–∏—Å Standoff 2!* üî•

–ú—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏–º –≤–∞—à–µ –∑–≤–∞–Ω–∏–µ –≤ –∏–≥—Ä–µ! üöÄ

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ:";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: welcomeText,
                parseMode: ParseMode.Markdown,
                replyMarkup: GetMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowPriceList(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var priceText = @"üéÆ *–ü–†–ê–ô–°-–õ–ò–°–¢ –ë–£–°–¢–ê STANDOFF 2* üéÆ

üí∞ *–¶–µ–Ω—ã –∑–∞ 1 –∑–≤–∞–Ω–∏–µ:*

‚Ä¢ *–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:* 100‚ÇΩ / 250üçØ (1 –∏–≥—Ä–∞)
‚Ä¢ *–ë—Ä–æ–Ω–∑–∞ ‚Üí –°–µ—Ä–µ–±—Ä–æ:* 50‚ÇΩ / 125üçØ
‚Ä¢ *–°–µ—Ä–µ–±—Ä–æ ‚Üí –ó–æ–ª–æ—Ç–æ:* 75‚ÇΩ / 188üçØ  
‚Ä¢ *–ó–æ–ª–æ—Ç–æ ‚Üí –§–µ–Ω–∏–∫—Å:* 100‚ÇΩ / 250üçØ
‚Ä¢ *–§–µ–Ω–∏–∫—Å ‚Üí –†–µ–Ω–∂–µ—Ä:* 120‚ÇΩ / 300üçØ
‚Ä¢ *–†–µ–Ω–∂–µ—Ä ‚Üí –ß–µ–º–ø–∏–æ–Ω:* 140‚ÇΩ / 350üçØ
‚Ä¢ *–ß–µ–º–ø–∏–æ–Ω ‚Üí –ú–∞—Å—Ç–µ—Ä:* 160‚ÇΩ / 400üçØ
‚Ä¢ *–ú–∞—Å—Ç–µ—Ä ‚Üí –≠–ª–∏—Ç–∞:* 200‚ÇΩ / 500üçØ
‚Ä¢ *–≠–ª–∏—Ç–∞ ‚Üí –õ–µ–≥–µ–Ω–¥–∞:* 999‚ÇΩ / 2500üçØ

‚ö†Ô∏è *–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îÇ *–ë–µ–∑ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç* (+50% –∫ —Ü–µ–Ω–µ)
‚îÇ *–¢–û–õ–¨–ö–û –≤ —Ä–µ–∂–∏–º–µ –°–æ—é–∑–Ω–∏–∫–∏*
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

üí° *–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å!*";

            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ "–ö—É–ø–∏—Ç—å"
            var buttons = new[]
            {
        new[] { InlineKeyboardButton.WithCallbackData("üõí –ö—É–ø–∏—Ç—å –±—É—Å—Ç", "buy_now") }
    };

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: priceText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static int CalculatePrice(string? currentRank, string? targetRank, bool isLobbyBoost)
        {
            if (string.IsNullOrEmpty(currentRank) || string.IsNullOrEmpty(targetRank))
            {
                return 0;
            }

            var rankValues = new Dictionary<string, int>
    {
        {"–±—Ä–æ–Ω–∑–∞ 1", 1}, {"–±—Ä–æ–Ω–∑–∞ 2", 2}, {"–±—Ä–æ–Ω–∑–∞ 3", 3}, {"–±—Ä–æ–Ω–∑–∞ 4", 4},
        {"—Å–µ—Ä–µ–±—Ä–æ 1", 5}, {"—Å–µ—Ä–µ–±—Ä–æ 2", 6}, {"—Å–µ—Ä–µ–±—Ä–æ 3", 7}, {"—Å–µ—Ä–µ–±—Ä–æ 4", 8},
        {"–∑–æ–ª–æ—Ç–æ 1", 9}, {"–∑–æ–ª–æ—Ç–æ 2", 10}, {"–∑–æ–ª–æ—Ç–æ 3", 11}, {"–∑–æ–ª–æ—Ç–æ 4", 12},
        {"—Ñ–µ–Ω–∏–∫—Å", 13}, {"—Ä–µ–Ω–∂–µ—Ä", 14}, {"—á–µ–º–ø–∏–æ–Ω", 15}, {"–º–∞—Å—Ç–µ—Ä", 16}, {"—ç–ª–∏—Ç–∞", 17}, {"–ª–µ–≥–µ–Ω–¥–∞", 18}
    };

            var pricePerRank = new Dictionary<int, int>
    {
        {1, 50}, {2, 50}, {3, 50}, {4, 60},
        {5, 70}, {6, 70}, {7, 70}, {8, 80},
        {9, 90}, {10, 90}, {11, 90}, {12, 100},
        {13, 120}, {14, 140}, {15, 160}, {16, 200}, {17, 999}
    };

            int currentValue = rankValues[currentRank.ToLower()];
            int targetValue = rankValues[targetRank.ToLower()];
            int totalPrice = 0;

            for (int i = currentValue; i < targetValue; i++)
            {
                totalPrice += pricePerRank[i];
            }

            if (isLobbyBoost)
            {
                totalPrice = (int)(totalPrice * 1.5);
            }

            return totalPrice;
        }

        private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            try
            {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
                if (update.CallbackQuery is { } callbackQuery)
                {
                    await HandleCallbackQuery(botClient, callbackQuery, cancellationToken);
                    return;
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (update.Message is { } message)
                {
                    await HandleMessage(botClient, message, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        private static async Task HandleMessage(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id;
            var text = message.Text ?? "";

            if (!UserStates.ContainsKey(chatId) || (LastActiveMap.ContainsKey(chatId) && (DateTime.Now - LastActiveMap[chatId]).TotalHours >= 24))
            {
                // –°–û–•–†–ê–ù–Ø–ï–ú username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                var username = message.From?.Username ?? "–ù–µ —É–∫–∞–∑–∞–Ω";
                SaveUserToDatabase(chatId, username);

                await botClient.SendTextMessageAsync(chatId, "/start", cancellationToken: cancellationToken);
                UserStates[chatId] = new UserState
                {
                    CurrentState = UserStateState.MainMenu,
                    UserName = username // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                };
                LastActiveMap[chatId] = DateTime.Now;
                return;
            }

            LastActiveMap[chatId] = DateTime.Now;
            var userState = UserStates[chatId];

            switch (text)
            {
                case "/start":
                    await SendWelcomeMessage(botClient, chatId, cancellationToken);
                    userState.CurrentState = UserStateState.MainMenu;
                    break;

                case "üõí –ö—É–ø–∏—Ç—å –±—É—Å—Ç":
                    // –ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∞–π—Å—É –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    await ShowPriceList(botClient, chatId, cancellationToken);
                    break;

                case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                    await ShowUserProfile(botClient, chatId, cancellationToken);
                    break;

                case "‚≠ê –û—Ç–∑—ã–≤—ã":
                    // –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º username
                    string reviewsUrl;

                    if (ReviewsGroupId.StartsWith("@"))
                    {
                        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username —Ç–∏–ø–∞ @groupname
                        reviewsUrl = $"https://t.me/{ReviewsGroupId.Substring(1)}";
                    }
                    else if (ReviewsGroupId.StartsWith("https://"))
                    {
                        // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
                        reviewsUrl = ReviewsGroupId;
                    }
                    else
                    {
                        // –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                        reviewsUrl = $"https://t.me/c/{ReviewsGroupId.Substring(4)}";
                    }

                    var reviewsKeyboard = new InlineKeyboardMarkup(
                        InlineKeyboardButton.WithUrl("üìù –ß–∏—Ç–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã", reviewsUrl)
                    );

                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚≠ê *–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤:",
                        parseMode: ParseMode.Markdown,
                        replyMarkup: reviewsKeyboard,
                        cancellationToken: cancellationToken);
                    break;

                default:
                    if (userState.CurrentState == UserStateState.WaitingForPlayerID)
                    {
                        await ProcessPlayerIDInput(botClient, chatId, text, userState, cancellationToken);
                    }
                    else
                    {
                        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                        await botClient.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üìã",
                            replyMarkup: GetMainMenuKeyboard(),
                            cancellationToken: cancellationToken);
                    }
                    break;
            }
        }

        private static async Task ShowUserProfile(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var users = new List<UserData>();
            if (System.IO.File.Exists("users.json"))
            {
                var data = System.IO.File.ReadAllText("users.json");
                users = JsonSerializer.Deserialize<List<UserData>>(data) ?? new List<UserData>();
            }

            var user = users.FirstOrDefault(u => u.UserId == chatId);
            var joinTime = user != null ? (DateTime.Now - user.JoinDate) : TimeSpan.Zero;

            var profileText = $@"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üìÖ *–£—á–∞—Å—Ç–Ω–∏–∫ —Å:* {user?.JoinDate:dd.MM.yyyy}
‚è∞ *–í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:* {joinTime.Days} –¥–Ω–µ–π {joinTime.Hours} —á–∞—Å–æ–≤
üéØ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:* {user?.CompletedOrders?.Count ?? 0}

üíé *–°—Ç–∞—Ç—É—Å:* {(user?.CompletedOrders?.Count >= 5 ? "ü•á –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç" : user?.CompletedOrders?.Count >= 3 ? "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç" : "ü•â –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")}";

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
            var profileKeyboard = new InlineKeyboardMarkup(new[]
            {
        new[]
        {
            InlineKeyboardButton.WithCallbackData("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", $"show_history_{chatId}")
        }
    });

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: profileText,
                parseMode: ParseMode.Markdown,
                replyMarkup: profileKeyboard,
                cancellationToken: cancellationToken);
        }

        private static async Task ShowOrdersHistory(ITelegramBotClient botClient, CallbackQuery callbackQuery, long userId, CancellationToken cancellationToken)
        {
            var users = new List<UserData>();
            if (System.IO.File.Exists("users.json"))
            {
                var data = System.IO.File.ReadAllText("users.json");
                users = JsonSerializer.Deserialize<List<UserData>>(data) ?? new List<UserData>();
            }

            var user = users.FirstOrDefault(u => u.UserId == userId);

            if (user?.CompletedOrders?.Count > 0)
            {
                var ordersList = user.CompletedOrders
                    .OrderByDescending(o => o.CompletionDate)
                    .Select(o => $"‚Ä¢ #{o.OrderNumber}: {o.FromRank} ‚Üí {o.ToRank} ({o.Price}‚ÇΩ) - {o.CompletionDate:dd.MM.yy}")
                    .ToArray();

                var historyText = $@"üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤* ({user.CompletedOrders.Count})

{string.Join("\n", ordersList)}";

                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: historyText,
                    parseMode: ParseMode.Markdown,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", $"collapse_history_{userId}") }
                    }),
                    cancellationToken: cancellationToken);
            }
            else
            {
                await botClient.EditMessageTextAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    messageId: callbackQuery.Message.MessageId,
                    text: "üìã *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤*\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                    parseMode: ParseMode.Markdown,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", $"collapse_history_{userId}") }
                    }),
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task CollapseOrdersHistory(ITelegramBotClient botClient, CallbackQuery callbackQuery, long userId, CancellationToken cancellationToken)
        {
            var users = new List<UserData>();
            if (System.IO.File.Exists("users.json"))
            {
                var data = System.IO.File.ReadAllText("users.json");
                users = JsonSerializer.Deserialize<List<UserData>>(data) ?? new List<UserData>();
            }

            var user = users.FirstOrDefault(u => u.UserId == userId);
            var joinTime = user != null ? (DateTime.Now - user.JoinDate) : TimeSpan.Zero;

            var profileText = $@"üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üìÖ *–£—á–∞—Å—Ç–Ω–∏–∫ —Å:* {user?.JoinDate:dd.MM.yyyy}
‚è∞ *–í —Å–æ–æ–±—â–µ—Å—Ç–≤–µ:* {joinTime.Days} –¥–Ω–µ–π {joinTime.Hours} —á–∞—Å–æ–≤
üéØ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—É—Å—Ç–æ–≤:* {user?.CompletedOrders?.Count ?? 0}

üíé *–°—Ç–∞—Ç—É—Å:* {(user?.CompletedOrders?.Count >= 5 ? "ü•á –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç" : user?.CompletedOrders?.Count >= 3 ? "ü•à –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç" : "ü•â –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")}";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: profileText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
            new[] { InlineKeyboardButton.WithCallbackData("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", $"show_history_{userId}") }
                }),
                cancellationToken: cancellationToken);
        }

        private static async Task ProcessPlayerIDInput(ITelegramBotClient botClient, long chatId, string text, UserState userState, CancellationToken cancellationToken)
        {
            if (!long.TryParse(text, out long playerId) || text.Length < 8 || text.Length > 9)
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!*\n\nID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8-9 —Ü–∏—Ñ—Ä\nüìù –ü—Ä–∏–º–µ—Ä: 51345522",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            userState.PlayerID = playerId;
            userState.CurrentState = UserStateState.Confirmation;

            var totalPrice = CalculatePrice(userState.CurrentRank!, userState.TargetRank!, userState.IsLobbyBoost);
            var honey = (int)(totalPrice * 2.5);

            var confirmationText = $@"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*

üéÆ *–†–µ–∂–∏–º:* {userState.SelectedMode}
{(userState.IsLobbyBoost ? "üí≥ *–¢–∏–ø:* –ß–µ—Ä–µ–∑ –ª–æ–±–±–∏ (+50%)\n" : "üí≥ *–¢–∏–ø:* –°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç\n")}
üìä *–¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ:* {userState.CurrentRank}
‚≠ê *–¶–µ–ª–µ–≤–æ–µ –∑–≤–∞–Ω–∏–µ:* {userState.TargetRank}
üÜî *ID –∞–∫–∫–∞—É–Ω—Ç–∞:* `{userState.PlayerID}`

üíµ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalPrice}‚ÇΩ / {honey}üçØ";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: confirmationText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_order"),
                        InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_order")
                    }
                }),
                cancellationToken: cancellationToken);
        }

        // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å Program

        private static InlineKeyboardMarkup GetBoostTypeKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
        new[] { InlineKeyboardButton.WithCallbackData("üîê –°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç", "boost_account") },
        new[] { InlineKeyboardButton.WithCallbackData("üéÆ –ß–µ—Ä–µ–∑ –ª–æ–±–±–∏ (+50%)", "boost_lobby") },
        new[] { InlineKeyboardButton.WithCallbackData("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back_to_main") }
    });
        }

        private static InlineKeyboardMarkup GetRanksKeyboard(string rankType, string? currentRank = null)
        {
            var allRanks = new[] {
        "–ë—Ä–æ–Ω–∑–∞ 1", "–ë—Ä–æ–Ω–∑–∞ 2", "–ë—Ä–æ–Ω–∑–∞ 3", "–ë—Ä–æ–Ω–∑–∞ 4",
        "–°–µ—Ä–µ–±—Ä–æ 1", "–°–µ—Ä–µ–±—Ä–æ 2", "–°–µ—Ä–µ–±—Ä–æ 3", "–°–µ—Ä–µ–±—Ä–æ 4",
        "–ó–æ–ª–æ—Ç–æ 1", "–ó–æ–ª–æ—Ç–æ 2", "–ó–æ–ª–æ—Ç–æ 3", "–ó–æ–ª–æ—Ç–æ 4",
        "–§–µ–Ω–∏–∫—Å", "–†–µ–Ω–∂–µ—Ä", "–ß–µ–º–ø–∏–æ–Ω", "–ú–∞—Å—Ç–µ—Ä", "–≠–ª–∏—Ç–∞", "–õ–µ–≥–µ–Ω–¥–∞"
    };

            string[] ranks;

            if (rankType == "target" && !string.IsNullOrEmpty(currentRank))
            {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–≤–∞–Ω–∏—è –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                var rankValues = new Dictionary<string, int>
        {
            {"–±—Ä–æ–Ω–∑–∞ 1", 1}, {"–±—Ä–æ–Ω–∑–∞ 2", 2}, {"–±—Ä–æ–Ω–∑–∞ 3", 3}, {"–±—Ä–æ–Ω–∑–∞ 4", 4},
            {"—Å–µ—Ä–µ–±—Ä–æ 1", 5}, {"—Å–µ—Ä–µ–±—Ä–æ 2", 6}, {"—Å–µ—Ä–µ–±—Ä–æ 3", 7}, {"—Å–µ—Ä–µ–±—Ä–æ 4", 8},
            {"–∑–æ–ª–æ—Ç–æ 1", 9}, {"–∑–æ–ª–æ—Ç–æ 2", 10}, {"–∑–æ–ª–æ—Ç–æ 3", 11}, {"–∑–æ–ª–æ—Ç–æ 4", 12},
            {"—Ñ–µ–Ω–∏–∫—Å", 13}, {"—Ä–µ–Ω–∂–µ—Ä", 14}, {"—á–µ–º–ø–∏–æ–Ω", 15}, {"–º–∞—Å—Ç–µ—Ä", 16}, {"—ç–ª–∏—Ç–∞", 17}, {"–ª–µ–≥–µ–Ω–¥–∞", 18}
        };

                int currentValue = rankValues[currentRank.ToLower()];
                ranks = allRanks.Where(r => rankValues[r.ToLower()] > currentValue).ToArray();
            }
            else
            {
                ranks = rankType switch
                {
                    "current" => allRanks.Take(17).ToArray(), // –í—Å–µ –∫—Ä–æ–º–µ –õ–µ–≥–µ–Ω–¥—ã
                    "target" => allRanks.Skip(1).ToArray(),   // –í—Å–µ –∫—Ä–æ–º–µ –ë—Ä–æ–Ω–∑—ã 1
                    _ => allRanks
                };
            }

            var buttons = new List<InlineKeyboardButton[]>();
            for (int i = 0; i < ranks.Length; i += 2)
            {
                var row = new List<InlineKeyboardButton>();
                row.Add(InlineKeyboardButton.WithCallbackData(ranks[i], $"rank_{ranks[i].ToLower().Replace(" ", "_")}"));
                if (i + 1 < ranks.Length)
                {
                    row.Add(InlineKeyboardButton.WithCallbackData(ranks[i + 1], $"rank_{ranks[i + 1].ToLower().Replace(" ", "_")}"));
                }
                buttons.Add(row.ToArray());
            }

            return new InlineKeyboardMarkup(buttons);
        }

        private static async Task HandleCallbackQuery(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {   
            var data = callbackQuery.Data;
            var chatId = callbackQuery.Message.Chat.Id;
            var messageId = callbackQuery.Message.MessageId;

            try
            {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø—ã Orders)
                if (data.StartsWith("accept_order_") || data.StartsWith("delete_order_") ||
                    data.StartsWith("complete_order_") || data.StartsWith("cancel_accepted_"))
                {
                    await HandleOrderActions(botClient, callbackQuery, cancellationToken);
                    return;
                }


                // –í –º–µ—Ç–æ–¥ HandleCallbackQuery –¥–æ–±–∞–≤–ª—è–µ–º:
                else if (data.StartsWith("show_history_"))
                {
                    var userId = long.Parse(data.Replace("show_history_", ""));
                    await ShowOrdersHistory(botClient, callbackQuery, userId, cancellationToken);
                }
                else if (data.StartsWith("collapse_history_"))
                {
                    var userId = long.Parse(data.Replace("collapse_history_", ""));
                    await CollapseOrdersHistory(botClient, callbackQuery, userId, cancellationToken);
                }

                // –í –º–µ—Ç–æ–¥ HandleCallbackQuery –¥–æ–±–∞–≤–ª—è–µ–º:
                else if (data.StartsWith("details_"))
                {
                    var orderNumber = int.Parse(data.Replace("details_", ""));
                    await ShowOrderDetails(botClient, callbackQuery, orderNumber, cancellationToken);
                }
                else if (data.StartsWith("collapse_"))
                {
                    var orderNumber = int.Parse(data.Replace("collapse_", ""));
                    await CollapseOrderDetails(botClient, callbackQuery, orderNumber, cancellationToken);
                }
                // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —á–∞—Ç–æ–≤
                if (data == "buy_now")
                {
                    await botClient.EditMessageTextAsync(
                        chatId: chatId,
                        messageId: messageId,
                        text: "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—É—Å—Ç–∞:*",
                        parseMode: ParseMode.Markdown,
                        replyMarkup: GetBoostTypeKeyboard(),
                        cancellationToken: cancellationToken);
                }
                else if (data.StartsWith("boost_"))
                {
                    var boostType = data.Replace("boost_", "");
                    if (!UserStates.ContainsKey(chatId))
                    {
                        UserStates[chatId] = new UserState();
                    }

                    var userState = UserStates[chatId];
                    userState.IsLobbyBoost = boostType == "lobby";
                    userState.CurrentState = UserStateState.ChoosingCurrentRank;

                    await botClient.EditMessageTextAsync(
                        chatId: chatId,
                        messageId: messageId,
                        text: "üìä *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ:*",
                        parseMode: ParseMode.Markdown,
                        replyMarkup: GetRanksKeyboard("current"),
                        cancellationToken: cancellationToken);
                }
                else if (data.StartsWith("rank_"))
                {
                    var rank = data.Replace("rank_", "").Replace("_", " ");
                    if (!UserStates.ContainsKey(chatId))
                    {
                        UserStates[chatId] = new UserState();
                    }

                    var userState = UserStates[chatId];

                    if (userState.CurrentState == UserStateState.ChoosingCurrentRank)
                    {
                        userState.CurrentRank = rank;
                        userState.CurrentState = UserStateState.ChoosingTargetRank;

                        await botClient.EditMessageTextAsync(
                            chatId: chatId,
                            messageId: messageId,
                            text: $"üìä *–¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ: {rank}*\n\n‚≠ê *–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–≤–∞–Ω–∏–µ:*",
                            parseMode: ParseMode.Markdown,
                            replyMarkup: GetRanksKeyboard("target", rank),
                            cancellationToken: cancellationToken);
                    }
                    else if (userState.CurrentState == UserStateState.ChoosingTargetRank)
                    {
                        userState.TargetRank = rank;

                        if (!userState.IsLobbyBoost)
                        {
                            userState.CurrentState = UserStateState.Confirmation;
                            await ShowOrderConfirmation(botClient, chatId, userState, cancellationToken);
                        }
                        else
                        {
                            userState.CurrentState = UserStateState.WaitingForPlayerID;
                            await botClient.EditMessageTextAsync(
                                chatId: chatId,
                                messageId: messageId,
                                text: $"‚úÖ *–í—ã–±—Ä–∞–Ω–æ –∑–≤–∞–Ω–∏–µ: {rank}*\n\nüÜî *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID (8-9 —Ü–∏—Ñ—Ä):*\nüìù –ü—Ä–∏–º–µ—Ä: 51345522",
                                parseMode: ParseMode.Markdown,
                                cancellationToken: cancellationToken);
                        }
                    }
                }
                else if (data == "confirm_order")
                {
                    await ProcessOrderConfirmation(botClient, chatId, cancellationToken);
                }
                else if (data == "cancel_order")
                {
                    if (UserStates.ContainsKey(chatId))
                    {
                        UserStates[chatId].CurrentState = UserStateState.MainMenu;
                    }

                    await botClient.EditMessageTextAsync(
                        chatId: chatId,
                        messageId: messageId,
                        text: "‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*",
                        parseMode: ParseMode.Markdown,
                        cancellationToken: cancellationToken);
                }
                else if (data == "back_to_main")
                {
                    await botClient.DeleteMessageAsync(chatId, messageId, cancellationToken);
                    await SendWelcomeMessage(botClient, chatId, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
            }

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
        }

        // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏
        private static async Task HandleOrderActions(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var data = callbackQuery.Data;
            var chatId = callbackQuery.Message.Chat.Id;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º string ID –≥—Ä—É–ø–ø—ã –≤ long –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            long ordersGroupIdLong = long.Parse(OrdersGroupId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø–µ Orders
            if (chatId != ordersGroupIdLong)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–∫–∞–∑–æ–≤",
                    cancellationToken: cancellationToken
                );
                return;
            }

            try
            {
                if (data.StartsWith("accept_order_"))
                {
                    var orderNumber = int.Parse(data.Replace("accept_order_", ""));
                    await AcceptOrder(botClient, callbackQuery, orderNumber, cancellationToken);
                }
                else if (data.StartsWith("delete_order_"))
                {
                    var orderNumber = int.Parse(data.Replace("delete_order_", ""));
                    await DeleteOrder(botClient, callbackQuery, orderNumber, cancellationToken);
                }
                else if (data.StartsWith("complete_order_"))
                {
                    var orderNumber = int.Parse(data.Replace("complete_order_", ""));
                    await CompleteOrder(botClient, callbackQuery, orderNumber, cancellationToken);
                }
                else if (data.StartsWith("cancel_accepted_"))
                {
                    var orderNumber = int.Parse(data.Replace("cancel_accepted_", ""));
                    await CancelAcceptedOrder(botClient, callbackQuery, orderNumber, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {ex.Message}");
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞",
                    cancellationToken: cancellationToken
                );
            }
        }

        private static async Task CancelAcceptedOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            var messageId = callbackQuery.Message.MessageId;
            var chatId = callbackQuery.Message.Chat.Id;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º string ID –≥—Ä—É–ø–ø—ã –≤ long –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            long ordersGroupIdLong = long.Parse(OrdersGroupId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø–µ Orders
            if (chatId != ordersGroupIdLong)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–∫–∞–∑–æ–≤",
                    cancellationToken: cancellationToken
                );
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null)
            {
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Order
            var notificationText = $@"üóëÔ∏è *–ó–∞–∫–∞–∑ #{orderNumber} –æ—Ç–º–µ–Ω–µ–Ω*
‚ùå *–ö—Ç–æ:* @{callbackQuery.From.Username}
‚è∞ *–ö–æ–≥–¥–∞:* {DateTime.Now:HH:mm:ss}
üí° *–ü—Ä–∏—á–∏–Ω–∞:* –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: notificationText,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken);

            // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
            await botClient.DeleteMessageAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                cancellationToken: cancellationToken);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ (–Ω–æ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤)
            UpdateOrderStatus(orderNumber, "cancelled", callbackQuery.From.Username);

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", cancellationToken: cancellationToken);
        }


        // ‚Üì‚Üì‚Üì –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–û–í ‚Üì‚Üì‚Üì
        private static async Task AcceptOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            var messageId = callbackQuery.Message.MessageId;
            var chatId = callbackQuery.Message.Chat.Id;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º string ID –≥—Ä—É–ø–ø—ã –≤ long –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            long ordersGroupIdLong = long.Parse(OrdersGroupId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø–µ Orders
            if (chatId != ordersGroupIdLong)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–∫–∞–∑–æ–≤",
                    cancellationToken: cancellationToken
                );
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null)
            {
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
            var originalText = callbackQuery.Message.Text;
            var updatedText = originalText.Replace("–ù–û–í–´–ô –ó–ê–ö–ê–ó", "–ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢") + $"\n\nüë®‚Äçüíº *–ü—Ä–∏–Ω—è–ª:* @{callbackQuery.From.Username}\n‚è∞ *–í—Ä–µ–º—è:* {DateTime.Now:HH:mm:ss}";

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            var contactUrl = string.IsNullOrEmpty(order.CustomerUsername)
                ? $"tg://user?id={order.CustomerId}"
                : $"https://t.me/{order.CustomerUsername}";

            var newKeyboard = new InlineKeyboardMarkup(new[]
            {
        new[]
        {
            InlineKeyboardButton.WithCallbackData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", $"complete_order_{orderNumber}"),
            InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", $"cancel_accepted_{orderNumber}")
        },
        new[]
        {
            InlineKeyboardButton.WithUrl("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", contactUrl)
        }
    });

            await botClient.EditMessageTextAsync(
                chatId: chatId,
                messageId: messageId,
                text: updatedText,
                parseMode: ParseMode.Markdown,
                replyMarkup: newKeyboard,
                cancellationToken: cancellationToken);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
            UpdateOrderStatus(orderNumber, "accepted", callbackQuery.From.Username);

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç", cancellationToken: cancellationToken);
        }


        private static OrderData? LoadOrderFromDatabase(int orderNumber)
        {
            try
            {
                if (System.IO.File.Exists("orders.json"))
                {
                    var data = System.IO.File.ReadAllText("orders.json");
                    var orders = JsonSerializer.Deserialize<List<OrderData>>(data);
                    return orders?.FirstOrDefault(o => o.OrderNumber == orderNumber);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞: {ex.Message}");
            }
            return null;
        }

        private static void UpdateOrderStatus(int orderNumber, string status, string acceptedBy)
        {
            try
            {
                if (System.IO.File.Exists("orders.json"))
                {
                    var data = System.IO.File.ReadAllText("orders.json");
                    var orders = JsonSerializer.Deserialize<List<OrderData>>(data) ?? new List<OrderData>();

                    var order = orders.FirstOrDefault(o => o.OrderNumber == orderNumber);
                    if (order != null)
                    {
                        order.Status = status;
                        order.AcceptedBy = acceptedBy;
                        order.AcceptedDate = DateTime.Now;

                        var json = JsonSerializer.Serialize(orders);
                        System.IO.File.WriteAllText("orders.json", json);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        private static async Task DeleteOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            var chatId = callbackQuery.Message.Chat.Id;

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º string ID –≥—Ä—É–ø–ø—ã –≤ long –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            long ordersGroupIdLong = long.Parse(OrdersGroupId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≥—Ä—É–ø–ø–µ Orders
            if (chatId != ordersGroupIdLong)
            {
                await botClient.AnswerCallbackQueryAsync(
                    callbackQuery.Id,
                    "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –∑–∞–∫–∞–∑–æ–≤",
                    cancellationToken: cancellationToken
                );
                return;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null)
            {
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É Order
            var notificationText = $@"üóëÔ∏è *–ó–∞–∫–∞–∑ #{orderNumber} —É–¥–∞–ª–µ–Ω*
‚ùå *–ö—Ç–æ:* @{callbackQuery.From.Username}
‚è∞ *–ö–æ–≥–¥–∞:* {DateTime.Now:HH:mm:ss}";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: notificationText,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken);

            // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
            await botClient.DeleteMessageAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                cancellationToken: cancellationToken);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ (–Ω–æ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤)
            UpdateOrderStatus(orderNumber, "deleted", callbackQuery.From.Username);

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω", cancellationToken: cancellationToken);
        }

        private static async Task CompleteOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null)
            {
                await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", cancellationToken: cancellationToken);
                return;
            }

            // –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ö–ê–ó –í –ü–†–û–§–ò–õ–¨ –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
            AddOrderToUserProfile(order, callbackQuery.From.Username);

            // –¢–û–õ–¨–ö–û –ù–û–ú–ï–† –ò –î–ê–¢–ê (–≤–∏–¥–Ω–æ —Å—Ä–∞–∑—É)
            var archiveText = $@"üìã *–ó–ê–ö–ê–ó #{orderNumber}*
üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {DateTime.Now:dd.MM.yyyy}";

            // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            var archiveKeyboard = new InlineKeyboardMarkup(new[]
            {
        new[]
        {
            InlineKeyboardButton.WithCallbackData("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", $"details_{orderNumber}")
        }
    });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É
            await botClient.SendTextMessageAsync(
                chatId: ArchiveGroupId,
                text: archiveText,
                parseMode: ParseMode.Markdown,
                replyMarkup: archiveKeyboard,
                cancellationToken: cancellationToken);

            // –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –≥—Ä—É–ø–ø—ã –∑–∞–∫–∞–∑–æ–≤
            await botClient.DeleteMessageAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                cancellationToken: cancellationToken);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ
            UpdateOrderCompletion(orderNumber, callbackQuery.From.Username);

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤", cancellationToken: cancellationToken);
        }


        private static async Task ShowOrderDetails(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null) return;

            // –í–°–Ø –ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (—Å–∫—Ä—ã—Ç–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π)
            var detailsText = $@"üìã *–ó–ê–ö–ê–ó #{orderNumber}*
üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {order.CompletionDate:dd.MM.yyyy}

üí≥ *–¢–∏–ø –±—É—Å—Ç–∞:* {(order.IsLobbyBoost ? "–ß–µ—Ä–µ–∑ –ª–æ–±–±–∏ (+50%)" : "–°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç")}
üéÆ *–†–µ–∂–∏–º:* –°–æ—é–∑–Ω–∏–∫–∏

üìä *–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*
‚îú‚îÄ –¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ: {order.CurrentRank}
‚îú‚îÄ –¶–µ–ª–µ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {order.TargetRank}
{(order.IsLobbyBoost ? $"‚îî‚îÄ ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{order.PlayerID}`" : "‚îî‚îÄ –î–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: —Ç—Ä–µ–±—É—é—Ç—Å—è")}

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {order.TotalPrice}‚ÇΩ / {order.TotalHoney}üçØ

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {(string.IsNullOrEmpty(order.CustomerUsername) ? "–ù–µ —É–∫–∞–∑–∞–Ω" : $"@{order.CustomerUsername}")}
üë®‚Äçüíº *–ü—Ä–∏–Ω—è–ª:* {order.AcceptedBy}
üèÅ *–í—ã–ø–æ–ª–Ω–∏–ª:* {order.CompletedBy}";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: detailsText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
            new[] { InlineKeyboardButton.WithCallbackData("‚¨ÜÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å", $"collapse_{orderNumber}") }
                }),
                cancellationToken: cancellationToken);
        }



        private static async Task CollapseOrderDetails(ITelegramBotClient botClient, CallbackQuery callbackQuery, int orderNumber, CancellationToken cancellationToken)
        {
            var order = LoadOrderFromDatabase(orderNumber);
            if (order == null) return;

            // –°–í–ï–†–ù–£–¢–´–ô –í–ò–î (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∏ –¥–∞—Ç–∞)
            var collapsedText = $@"üìã *–ó–ê–ö–ê–ó #{orderNumber}*
üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {order.CompletionDate:dd.MM.yyyy}";

            await botClient.EditMessageTextAsync(
                chatId: callbackQuery.Message.Chat.Id,
                messageId: callbackQuery.Message.MessageId,
                text: collapsedText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
            new[] { InlineKeyboardButton.WithCallbackData("üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", $"details_{orderNumber}") }
                }),
                cancellationToken: cancellationToken);
        }

        private static void AddOrderToUserProfile(OrderData order, string completedBy)
        {
            try
            {
                var users = new List<UserData>();
                if (System.IO.File.Exists("users.json"))
                {
                    var data = System.IO.File.ReadAllText("users.json");
                    users = JsonSerializer.Deserialize<List<UserData>>(data) ?? new List<UserData>();
                }

                var user = users.FirstOrDefault(u => u.UserId == order.CustomerId);
                if (user != null)
                {
                    // –û–ë–ù–û–í–õ–Ø–ï–ú username –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                    if (!string.IsNullOrEmpty(order.CustomerUsername) && order.CustomerUsername != "–ù–µ —É–∫–∞–∑–∞–Ω")
                    {
                        user.Username = order.CustomerUsername;
                    }

                    user.CompletedOrders.Add(new CompletedOrder
                    {
                        OrderNumber = order.OrderNumber,
                        CompletionDate = DateTime.Now,
                        CompletedBy = completedBy,
                        FromRank = order.CurrentRank,
                        ToRank = order.TargetRank,
                        Price = order.TotalPrice,
                        BoostType = order.IsLobbyBoost ? "–ß–µ—Ä–µ–∑ –ª–æ–±–±–∏" : "–°–æ –≤—Ö–æ–¥–æ–º"
                    });

                    var json = JsonSerializer.Serialize(users);
                    System.IO.File.WriteAllText("users.json", json);

                    Console.WriteLine($"‚úÖ –ó–∞–∫–∞–∑ #{order.OrderNumber} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.CustomerId}");
                }
                else
                {
                    // –°–û–ó–î–ê–ï–ú –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
                    var newUser = new UserData
                    {
                        UserId = order.CustomerId,
                        Username = order.CustomerUsername,
                        JoinDate = DateTime.Now,
                        LastActive = DateTime.Now,
                        CompletedOrders = new List<CompletedOrder>
                {
                    new CompletedOrder
                    {
                        OrderNumber = order.OrderNumber,
                        CompletionDate = DateTime.Now,
                        CompletedBy = completedBy,
                        FromRank = order.CurrentRank,
                        ToRank = order.TargetRank,
                        Price = order.TotalPrice,
                        BoostType = order.IsLobbyBoost ? "–ß–µ—Ä–µ–∑ –ª–æ–±–±–∏" : "–°–æ –≤—Ö–æ–¥–æ–º"
                    }
                }
                    };

                    users.Add(newUser);
                    var json = JsonSerializer.Serialize(users);
                    System.IO.File.WriteAllText("users.json", json);

                    Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order.CustomerId} —Å –∑–∞–∫–∞–∑–æ–º #{order.OrderNumber}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å: {ex.Message}");
            }
        }

        private static void UpdateOrderCompletion(int orderNumber, string completedBy)
        {
            try
            {
                if (System.IO.File.Exists("orders.json"))
                {
                    var data = System.IO.File.ReadAllText("orders.json");
                    var orders = JsonSerializer.Deserialize<List<OrderData>>(data) ?? new List<OrderData>();

                    var order = orders.FirstOrDefault(o => o.OrderNumber == orderNumber);
                    if (order != null)
                    {
                        order.Status = "completed";
                        order.CompletedBy = completedBy;
                        order.CompletionDate = DateTime.Now;

                        var json = JsonSerializer.Serialize(orders);
                        System.IO.File.WriteAllText("orders.json", json);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {ex.Message}");
            }
        }


        private static async Task ProcessOrderConfirmation(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            if (!UserStates.ContainsKey(chatId) || string.IsNullOrEmpty(UserStates[chatId].CurrentRank) ||
                string.IsNullOrEmpty(UserStates[chatId].TargetRank))
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", cancellationToken: cancellationToken);
                return;
            }

            var userState = UserStates[chatId];
            var orderNumber = orderCounter++;
            SaveOrderCounter();

            var totalPrice = CalculatePrice(userState.CurrentRank, userState.TargetRank, userState.IsLobbyBoost);
            var honey = (int)(totalPrice * 2.5);

            // –°–û–•–†–ê–ù–Ø–ï–ú username –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var customerUsername = userState.UserName ?? "–ù–µ —É–∫–∞–∑–∞–Ω";

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            var orderData = new OrderData
            {
                OrderNumber = orderNumber,
                CustomerId = chatId,
                CustomerUsername = customerUsername, // –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
                CurrentRank = userState.CurrentRank,
                TargetRank = userState.TargetRank,
                PlayerID = userState.IsLobbyBoost ? userState.PlayerID ?? 0 : 0,
                IsLobbyBoost = userState.IsLobbyBoost,
                TotalPrice = totalPrice,
                TotalHoney = honey,
                OrderDate = DateTime.Now,
                Status = "new"
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑—É (–£–ë–ò–†–ê–ï–ú ActiveOrders)
            SaveOrderToDatabase(orderData);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            string orderText = userState.IsLobbyBoost
                ? $@"üéØ *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{orderNumber}* üéØ
üìÖ *–î–∞—Ç–∞:* {DateTime.Now:dd.MM.yyyy HH:mm}

üí≥ *–¢–∏–ø –±—É—Å—Ç–∞:* –ß–µ—Ä–µ–∑ –ª–æ–±–±–∏ (+50%)
üéÆ *–†–µ–∂–∏–º:* –°–æ—é–∑–Ω–∏–∫–∏

üìä *–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*
‚îú‚îÄ –¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ: {userState.CurrentRank}
‚îú‚îÄ –¶–µ–ª–µ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {userState.TargetRank}
‚îî‚îÄ ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{userState.PlayerID}`

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {totalPrice}‚ÇΩ / {honey}üçØ

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {(string.IsNullOrEmpty(userState.UserName) ? "–ù–µ —É–∫–∞–∑–∞–Ω" : $"@{userState.UserName}")}"
                : $@"üéØ *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{orderNumber}* üéØ
üìÖ *–î–∞—Ç–∞:* {DateTime.Now:dd.MM.yyyy HH:mm}

üí≥ *–¢–∏–ø –±—É—Å—Ç–∞:* –°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç
üéÆ *–†–µ–∂–∏–º:* –°–æ—é–∑–Ω–∏–∫–∏

üìä *–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*
‚îú‚îÄ –¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ: {userState.CurrentRank}
‚îú‚îÄ –¶–µ–ª–µ–≤–æ–µ –∑–≤–∞–Ω–∏–µ: {userState.TargetRank}
‚îî‚îÄ *–¢—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞*

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {totalPrice}‚ÇΩ / {honey}üçØ

üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {(string.IsNullOrEmpty(userState.UserName) ? "–ù–µ —É–∫–∞–∑–∞–Ω" : $"@{userState.UserName}")}";

            var orderKeyboard = new InlineKeyboardMarkup(new[]
            {
        new[]
        {
            InlineKeyboardButton.WithCallbackData("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", $"accept_order_{orderNumber}"),
            InlineKeyboardButton.WithCallbackData("‚ùå –£–¥–∞–ª–∏—Ç—å", $"delete_order_{orderNumber}")
        }
    });

            try
            {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
                var message = await botClient.SendTextMessageAsync(
                    chatId: OrdersGroupId,
                    text: orderText,
                    parseMode: ParseMode.Markdown,
                    replyMarkup: orderKeyboard,
                    cancellationToken: cancellationToken);

                // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                string userMessage = userState.IsLobbyBoost
                    ? $@"‚úÖ *–ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–§–û–†–ú–õ–ï–ù!* üéâ

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
‚îú‚îÄ –ù–æ–º–µ—Ä: #{orderNumber}
‚îú‚îÄ –†–µ–∂–∏–º: –°–æ—é–∑–Ω–∏–∫–∏
‚îú‚îÄ –¢–∏–ø: –ß–µ—Ä–µ–∑ –ª–æ–±–±–∏
‚îú‚îÄ –†–∞–Ω–≥: {userState.CurrentRank} ‚Üí {userState.TargetRank}
‚îú‚îÄ ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{userState.PlayerID}`
‚îî‚îÄ –°—Ç–æ–∏–º–æ—Å—Ç—å: {totalPrice}‚ÇΩ / {honey}üçØ

‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º*
üìû *–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è*"
                    : $@"‚úÖ *–ó–ê–ö–ê–ó –£–°–ü–ï–®–ù–û –û–§–û–†–ú–õ–ï–ù!* üéâ

üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
‚îú‚îÄ –ù–æ–º–µ—Ä: #{orderNumber}
‚îú‚îÄ –†–µ–∂–∏–º: –°–æ—é–∑–Ω–∏–∫–∏
‚îú‚îÄ –¢–∏–ø: –°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç
‚îú‚îÄ –†–∞–Ω–≥: {userState.CurrentRank} ‚Üí {userState.TargetRank}
‚îî‚îÄ –°—Ç–æ–∏–º–æ—Å—Ç—å: {totalPrice}‚ÇΩ / {honey}üçØ

‚ö†Ô∏è *–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞*

‚è≥ *–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º*
üìû *–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è*";

                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: userMessage,
                    parseMode: ParseMode.Markdown,
                    replyMarkup: GetMainMenuKeyboard(),
                    cancellationToken: cancellationToken);

            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {ex.Message}");

                // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: @"‚ö†Ô∏è *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥–∞–≤—Ü—É!*

üìû *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @krizzly2150 –Ω–∞–ø—Ä—è–º—É—é*",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
            }

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userState.CurrentState = UserStateState.MainMenu;
            userState.CurrentRank = null;
            userState.TargetRank = null;
            userState.PlayerID = null;
            userState.IsLobbyBoost = false;
        }
        private static void SaveOrderToDatabase(OrderData orderData)
        {
            var orders = new List<OrderData>();
            if (System.IO.File.Exists("orders.json"))
            {
                var data = System.IO.File.ReadAllText("orders.json");
                orders = JsonSerializer.Deserialize<List<OrderData>>(data) ?? new List<OrderData>();
            }

            orders.Add(orderData);
            var json = JsonSerializer.Serialize(orders);
            System.IO.File.WriteAllText("orders.json", json);
        }

        private static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                ApiRequestException apiRequestException => $"Telegram API Error: [{apiRequestException.ErrorCode}] {apiRequestException.Message}",
                _ => exception.ToString()
            };

            Console.WriteLine(errorMessage);
            return Task.CompletedTask;
        }

        public class BotService : IHostedService
        {
            private readonly ITelegramBotClient _botClient;
            private CancellationTokenSource? _cts;

            public BotService(ITelegramBotClient botClient)
            {
                _botClient = botClient;
            }

            public async Task StartAsync(CancellationToken cancellationToken)
            {
                _cts = new CancellationTokenSource();

                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = Array.Empty<UpdateType>()
                };

                _botClient.StartReceiving(
                    updateHandler: HandleUpdateAsync,
                    pollingErrorHandler: HandlePollingErrorAsync,
                    receiverOptions: receiverOptions,
                    cancellationToken: _cts.Token
                );

                var me = await _botClient.GetMeAsync(cancellationToken);
                Console.WriteLine($"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.Username}");
            }

            public Task StopAsync(CancellationToken cancellationToken)
            {
                _cts?.Cancel();
                return Task.CompletedTask;
            }
        }

        public class UserState
        {
            public UserStateState CurrentState { get; set; }
            public string? SelectedMode { get; set; }
            public string? CurrentRank { get; set; }
            public string? TargetRank { get; set; }
            public long? PlayerID { get; set; }
            public bool IsLobbyBoost { get; set; }
            public string? UserName { get; set; }
        }

        public enum UserStateState
        {
            MainMenu,
            ChoosingCurrentRank,
            ChoosingTargetRank,
            WaitingForPlayerID,
            Confirmation
        }

        public class UserData
        {
            public long UserId { get; set; }
            public string? Username { get; set; }
            public DateTime JoinDate { get; set; }
            public DateTime LastActive { get; set; }
            public List<CompletedOrder> CompletedOrders { get; set; } = new List<CompletedOrder>();
        }

        public class OrderData
        {
            public int OrderNumber { get; set; }
            public long CustomerId { get; set; }
            public string? CustomerUsername { get; set; }
            public string CurrentRank { get; set; } = null!;
            public string TargetRank { get; set; } = null!;
            public long PlayerID { get; set; } // 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ ID –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç)
            public bool IsLobbyBoost { get; set; }
            public int TotalPrice { get; set; }
            public int TotalHoney { get; set; }
            public DateTime OrderDate { get; set; }
            public string Status { get; set; } = null!;
            public string? AcceptedBy { get; set; }
            public DateTime? AcceptedDate { get; set; }
            public string? CompletedBy { get; set; }
            public DateTime? CompletionDate { get; set; }
        }

        public class CompletedOrder
        {
            public int OrderNumber { get; set; }
            public DateTime CompletionDate { get; set; }
            public string CompletedBy { get; set; } = null!;
            public string FromRank { get; set; } = null!;
            public string ToRank { get; set; } = null!;
            public int Price { get; set; }
            public string BoostType { get; set; } = null!;
        }

        private static async Task ShowOrderConfirmation(ITelegramBotClient botClient, long chatId, UserState userState, CancellationToken cancellationToken)
        {
            if (string.IsNullOrEmpty(userState.CurrentRank) || string.IsNullOrEmpty(userState.TargetRank))
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∑–≤–∞–Ω–∏—è",
                    cancellationToken: cancellationToken);
                return;
            }

            var totalPrice = CalculatePrice(userState.CurrentRank, userState.TargetRank, userState.IsLobbyBoost);
            var honey = (int)(totalPrice * 2.5);

            var confirmationText = $@"üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:*

üéÆ *–†–µ–∂–∏–º:* –°–æ—é–∑–Ω–∏–∫–∏
üí≥ *–¢–∏–ø:* –°–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç

üìä *–¢–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ:* {userState.CurrentRank}
‚≠ê *–¶–µ–ª–µ–≤–æ–µ –∑–≤–∞–Ω–∏–µ:* {userState.TargetRank}

üíµ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:* {totalPrice}‚ÇΩ / {honey}üçØ

‚ö†Ô∏è *–î–ª—è –±—É—Å—Ç–∞ —Å–æ –≤—Ö–æ–¥–æ–º –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞*";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: confirmationText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_order"),
                InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_order")
            }
                }),
                cancellationToken: cancellationToken);
        }
    }
}
