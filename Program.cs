using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Text.RegularExpressions;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace Standoff2BoostBot
{
    public class Program
    {
        // –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ using
        public class OrderData
        {
            public string OrderNumber { get; set; } = null!;
            public long CustomerId { get; set; }
            public string? CustomerUsername { get; set; }
            public string SelectedMode { get; set; } = null!;
            public int CurrentMMR { get; set; }
            public string DesiredRank { get; set; } = null!;
            public long PlayerID { get; set; }
            public DateTime OrderDate { get; set; }
            public string Status { get; set; } = "new"; // new, in_progress, completed
        }

        public static class OrderManager
        {
            public static readonly Dictionary<string, OrderData> Orders = new();
            public static readonly Dictionary<int, string> MessageToOrderMap = new(); // messageId -> orderNumber
        }
        private static string BotToken => Environment.GetEnvironmentVariable("BOT_TOKEN") ?? "8342644005:AAHTb1NDunMgtJ2dk3VZBpji5xWG9M-JgmI";
        private static string SellerUsername => Environment.GetEnvironmentVariable("SELLER_USERNAME") ?? "krizzly2150";
        private static string OrdersGroupId => Environment.GetEnvironmentVariable("ORDERS_GROUP_ID") ?? "-1002946352030"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à group ID

        // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        private static readonly Dictionary<long, UserState> UserStates = new();

        public static async Task Main(string[] args)
        {
            while (true)
            {
                try
                {
                    Console.WriteLine($"üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {DateTime.Now}");

                    using var host = Host.CreateDefaultBuilder(args)
                        .ConfigureServices((context, services) =>
                        {
                            services.AddSingleton<ITelegramBotClient>(new TelegramBotClient(BotToken));
                            services.AddHostedService<BotService>();
                        })
                        .Build();

                    await host.RunAsync();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"üí• –û—à–∏–±–∫–∞: {ex.Message}");
                    Console.WriteLine("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...");
                    await Task.Delay(30000);
                }
            }
        }

        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø–æ–¥ —Å–∫—Ä–µ–ø–∫–æ–π)
        private static ReplyKeyboardMarkup GetMainMenuKeyboard()
        {
            return new ReplyKeyboardMarkup(new[]
            {
                new[] { new KeyboardButton("üõí –ö—É–ø–∏—Ç—å –±—É—Å—Ç") },
                new[] { new KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), new KeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã") }
            })
            {
                ResizeKeyboard = true
            };
        }

        // –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        private static InlineKeyboardMarkup GetModeSelectKeyboard()
        {
            var buttons = new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üéØ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π [5x5]", "mode_comp") },
                new[] { InlineKeyboardButton.WithCallbackData("ü§ù –°–æ—é–∑–Ω–∏–∫–∏ [2x2]", "mode_allies") },
                new[] { InlineKeyboardButton.WithCallbackData("‚öîÔ∏è –î—É—ç–ª–∏ [1x1]", "mode_duels") },
                new[] { InlineKeyboardButton.WithCallbackData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back_to_main") }
            };

            return new InlineKeyboardMarkup(buttons);
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è (–ë—Ä–æ–Ω–∑–∞)
        private static InlineKeyboardMarkup GetBronzeRanksKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–∞ 1", "rank_bronze1") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–∞ 2", "rank_bronze2") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–∞ 3", "rank_bronze3") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•â –ë—Ä–æ–Ω–∑–∞ 4", "rank_bronze4") },
                new[] { InlineKeyboardButton.WithCallbackData("‚û°Ô∏è –î–∞–ª–µ–µ", "ranks_next_silver") }
            });
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è (–°–µ—Ä–µ–±—Ä–æ)
        private static InlineKeyboardMarkup GetSilverRanksKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä–æ 1", "rank_silver1") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä–æ 2", "rank_silver2") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä–æ 3", "rank_silver3") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•à –°–µ—Ä–µ–±—Ä–æ 4", "rank_silver4") },
                new[] {
                    InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ranks_prev_bronze"),
                    InlineKeyboardButton.WithCallbackData("‚û°Ô∏è –î–∞–ª–µ–µ", "ranks_next_gold")
                }
            });
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è (–ó–æ–ª–æ—Ç–æ)
        private static InlineKeyboardMarkup GetGoldRanksKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ 1", "rank_gold1") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ 2", "rank_gold2") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ 3", "rank_gold3") },
                new[] { InlineKeyboardButton.WithCallbackData("ü•á –ó–æ–ª–æ—Ç–æ 4", "rank_gold4") },
                new[] {
                    InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ranks_prev_silver"),
                    InlineKeyboardButton.WithCallbackData("‚û°Ô∏è –î–∞–ª–µ–µ", "ranks_next_higher")
                }
            });
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è (–í—ã—Å—à–∏–µ –∑–≤–∞–Ω–∏—è)
        private static InlineKeyboardMarkup GetHigherRanksKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üî• –§–µ–Ω–∏–∫—Å", "rank_phoenix") },
                new[] { InlineKeyboardButton.WithCallbackData("üéØ –†–µ–Ω–∂–µ—Ä", "rank_ranger") },
                new[] { InlineKeyboardButton.WithCallbackData("üèÜ –ß–µ–º–ø–∏–æ–Ω", "rank_champion") },
                new[] { InlineKeyboardButton.WithCallbackData("‚≠ê –ú–∞—Å—Ç–µ—Ä", "rank_master") },
                new[] { InlineKeyboardButton.WithCallbackData("üëë –≠–ª–∏—Ç–∞", "rank_elite") },
                new[] { InlineKeyboardButton.WithCallbackData("üêâ –õ–µ–≥–µ–Ω–¥–∞", "rank_legend") },
                new[] { InlineKeyboardButton.WithCallbackData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ranks_prev_gold") }
            });
        }

        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        private static InlineKeyboardMarkup GetConfirmationKeyboard()
        {
            return new InlineKeyboardMarkup(new[]
            {
                new[] {
                    InlineKeyboardButton.WithCallbackData("‚úÖ –î–∞, –≤—Å—ë –≤–µ—Ä–Ω–æ", "confirm_yes"),
                    InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∞", "confirm_no")
                }
            });
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Message != null && update.Message.Chat.Type == ChatType.Group)
            {
                Console.WriteLine($"Group ID: {update.Message.Chat.Id}");
                return;
            }
            try
            {
                if (update.Type == UpdateType.Message && update.Message != null)
                {
                    await HandleMessage(botClient, update.Message, cancellationToken);
                }
                else if (update.Type == UpdateType.CallbackQuery && update.CallbackQuery != null)
                {
                    await HandleCallbackQuery(botClient, update.CallbackQuery, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }
        private static async Task HandleTakeOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, string data, CancellationToken cancellationToken)
        {
            var orderNumber = data.Replace("take_order_", "");
            var messageId = callbackQuery.Message.MessageId;
            var chatId = callbackQuery.Message.Chat.Id;

            if (OrderManager.Orders.TryGetValue(orderNumber, out var order))
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                order.Status = "in_progress";

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                var updatedText = callbackQuery.Message.Text.Replace("üÜï –ù–û–í–´–ô", "üü° –í –†–ê–ë–û–¢–ï");

                var newKeyboard = new InlineKeyboardMarkup(new[]
                {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –í–´–ü–û–õ–ù–ï–ù–û", $"complete_order_{orderNumber}")
            },
            new[]
            {
                InlineKeyboardButton.WithUrl("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", $"tg://user?id={order.CustomerId}")
            }
        });

                await botClient.EditMessageTextAsync(
                    chatId: chatId,
                    messageId: messageId,
                    text: updatedText,
                    parseMode: ParseMode.Markdown,
                    replyMarkup: newKeyboard,
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleCompleteOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, string data, CancellationToken cancellationToken)
        {
            var orderNumber = data.Replace("complete_order_", "");
            var messageId = callbackQuery.Message.MessageId;
            var chatId = callbackQuery.Message.Chat.Id;

            if (OrderManager.Orders.TryGetValue(orderNumber, out var order))
            {
                // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è
                var confirmKeyboard = new InlineKeyboardMarkup(new[]
                {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("‚úÖ –î–ê, –ó–ê–ö–†–´–¢–¨", $"confirm_close_{orderNumber}_{messageId}"),
                InlineKeyboardButton.WithCallbackData("‚ùå –ù–ï–¢", $"cancel_close_{messageId}")
            }
        });

                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"‚ùì *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ #{orderNumber}?*",
                    parseMode: ParseMode.Markdown,
                    replyMarkup: confirmKeyboard,
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleConfirmClose(ITelegramBotClient botClient, CallbackQuery callbackQuery, string data, CancellationToken cancellationToken)
        {
            var parts = data.Replace("confirm_close_", "").Split('_');
            var orderNumber = parts[0];
            var targetMessageId = int.Parse(parts[1]);

            if (OrderManager.Orders.TryGetValue(orderNumber, out var order))
            {
                order.Status = "completed";

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º
                await botClient.DeleteMessageAsync(callbackQuery.Message.Chat.Id, targetMessageId, cancellationToken);

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await botClient.DeleteMessageAsync(callbackQuery.Message.Chat.Id, callbackQuery.Message.MessageId, cancellationToken);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
                await botClient.SendTextMessageAsync(
                    chatId: callbackQuery.Message.Chat.Id,
                    text: $"‚úÖ *–ó–∞–∫–∞–∑ #{orderNumber} –∑–∞–∫—Ä—ã—Ç*",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleCloseOrder(ITelegramBotClient botClient, CallbackQuery callbackQuery, string data, CancellationToken cancellationToken)
        {
            var orderNumber = data.Replace("close_order_", "");

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await botClient.DeleteMessageAsync(callbackQuery.Message.Chat.Id, callbackQuery.Message.MessageId, cancellationToken);
        }

        private static async Task HandleMessage(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var chatId = message.Chat.Id;
            var text = message.Text ?? "";

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π /start –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (!UserStates.ContainsKey(chatId))
            {
                await SendWelcomeMessage(botClient, chatId, cancellationToken);
                UserStates[chatId] = new UserState { CurrentState = UserStateState.MainMenu };
                return;
            }

            var userState = UserStates[chatId];

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            switch (text)
            {
                case "/start":
                    await SendWelcomeMessage(botClient, chatId, cancellationToken);
                    userState.CurrentState = UserStateState.MainMenu;
                    break;

                case "üõí –ö—É–ø–∏—Ç—å –±—É—Å—Ç":
                    await ShowPriceList(botClient, chatId, cancellationToken);
                    break;

                case "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤.",
                        parseMode: ParseMode.Markdown,
                        replyMarkup: GetMainMenuKeyboard(),
                        cancellationToken: cancellationToken);
                    break;

                case "‚≠ê –û—Ç–∑—ã–≤—ã":
                    await botClient.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚≠ê *–û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n\n" +
                             "‚Ä¢ '–û—Ç–ª–∏—á–Ω—ã–π –±—É—Å—Ç, –≤—Å—ë –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ! üéØ'\n" +
                             "‚Ä¢ '–ë—É—Å—Ç–∏–ª–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ üîê'\n" +
                             "‚Ä¢ '–†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞! üíØ'\n" +
                             "‚Ä¢ '–¶–µ–Ω—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ ‚ö°'",
                        parseMode: ParseMode.Markdown,
                        replyMarkup: GetMainMenuKeyboard(),
                        cancellationToken: cancellationToken);
                    break;

                default:
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    switch (userState.CurrentState)
                    {
                        case UserStateState.WaitingForMMR:
                            await ProcessMMRInput(botClient, chatId, text, userState, cancellationToken);
                            break;

                        case UserStateState.WaitingForID:
                            await ProcessIDInput(botClient, chatId, text, userState, cancellationToken);
                            break;

                        default:
                            await botClient.SendTextMessageAsync(
                                chatId: chatId,
                                text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üìã",
                                replyMarkup: GetMainMenuKeyboard(),
                                cancellationToken: cancellationToken);
                            break;
                    }
                    break;
            }
        }

        private static async Task SendWelcomeMessage(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var welcomeText = "üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±—É—Å—Ç-—Å–µ—Ä–≤–∏—Å Standoff 2!* üî•\n\n" +
                             "–ú—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–≤—ã—Å–∏–º –≤–∞—à–µ –∑–≤–∞–Ω–∏–µ –≤ –∏–≥—Ä–µ! üöÄ\n\n" +
                             "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ:";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: welcomeText,
                parseMode: ParseMode.Markdown,
                replyMarkup: GetMainMenuKeyboard(),
                cancellationToken: cancellationToken);
        }

        private static async Task ShowPriceList(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            var priceText = "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄüî• *–ü–†–ê–ô–°* üî•‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ 10 –∏–≥—Ä (400‚ÇΩ/1000üçØ)‚ùó\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚ùó*–ë–£–°–¢ –°:*‚ùó‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –ë—Ä–æ–Ω–∑—ã 1 –¥–æ –ë—Ä–æ–Ω–∑—ã 2 (50‚ÇΩ/125üçØ);\n" +
                           "‚Ä¢ –ë—Ä–æ–Ω–∑—ã 2 –¥–æ –ë—Ä–æ–Ω–∑—ã 3 (50‚ÇΩ/125üçØ);\n" +
                           "‚Ä¢ –ë—Ä–æ–Ω–∑—ã 3 –¥–æ –ë—Ä–æ–Ω–∑—ã 4 (50‚ÇΩ/125üçØ);\n" +
                           "‚Ä¢ –ë—Ä–æ–Ω–∑—ã 4 –¥–æ –°–∏–ª—å–≤–µ—Ä–∞ 1 (60‚ÇΩ/150üçØ);\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –°–∏–ª—å–≤–µ—Ä–∞ 1 –¥–æ –°–∏–ª—å–≤–µ—Ä–∞ 2 (70‚ÇΩ/175üçØ);\n" +
                           "‚Ä¢ –°–∏–ª—å–≤–µ—Ä–∞ 2 –¥–æ –°–∏–ª—å–≤–µ—Ä–∞ 3 (70‚ÇΩ/175üçØ);\n" +
                           "‚Ä¢ –°–∏–ª—å–≤–µ—Ä–∞ 3 –¥–æ –°–∏–ª—å–≤–µ—Ä–∞ 4 (70‚ÇΩ/175üçØ);\n" +
                           "‚Ä¢ –°–∏–ª—å–≤–µ—Ä–∞ 4 –¥–æ –ì–æ–ª–¥–∞ 1 (80‚ÇΩ/200üçØ);\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –ì–æ–ª–¥–∞ 1 –¥–æ –ì–æ–ª–¥–∞ 2 (90‚ÇΩ/225üçØ);\n" +
                           "‚Ä¢ –ì–æ–ª–¥–∞ 2 –¥–æ –ì–æ–ª–¥–∞ 3 (90‚ÇΩ/225üçØ);\n" +
                           "‚Ä¢ –ì–æ–ª–¥–∞ 3 –¥–æ –ì–æ–ª–¥–∞ 4 (90‚ÇΩ/225üçØ);\n" +
                           "‚Ä¢ –ì–æ–ª–¥–∞ 4 –¥–æ –§–µ–Ω–∏–∫—Å–∞ (100‚ÇΩ/250üçØ);\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –§–µ–Ω–∏–∫—Å–∞ –¥–æ –†–µ–Ω–∂–µ—Ä–∞ (120‚ÇΩ/300üçØ);\n" +
                           "‚Ä¢ –†–µ–Ω–∂–µ—Ä–∞ –¥–æ –ß–µ–º–ø–∏–æ–Ω–∞ (140‚ÇΩ/350üçØ);\n" +
                           "‚Ä¢ –ß–µ–º–ø–∏–æ–Ω–∞ –¥–æ –ú–∞—Å—Ç–µ—Ä–∞ (170‚ÇΩ/425üçØ);\n" +
                           "‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞ –¥–æ –≠–ª–∏—Ç—ã (200‚ÇΩ/500üçØ);\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚Ä¢ –≠–ª–∏—Ç—ã –¥–æ –õ–µ–≥–µ–Ω–¥—ã (2500‚ÇΩ/6000üçØ).\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "*–ü–æ –ø–æ–≤–æ–¥—É –ø–æ–∫—É–ø–∫–∏ –±—É—Å—Ç–∞ –ø–∏—Å–∞—Ç—å* üëá\n\n" +
                           "‚îÄ    ‚îÄ    ‚îÄ    ‚îÄ    ‚îÄ    ‚îÄ    ‚îÄ    ‚îÄ @kr1zzly2150\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚ùó*–ó–ê–ü–†–ï–©–ï–ù–û –∏–≥—Ä–∞—Ç—å –≤ —Ä–µ–∂–∏–º, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—É–ø–∏–ª–∏ –±—É—Å—Ç* (–ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–µ—Ä–Ω—É, –±—É—Å—Ç –Ω–µ —Å–¥–µ–ª–∞—é)‚ùó\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "‚úîÔ∏è *–ö–∞–∫ –∫—É–ø–∏—Ç—å –±—É—Å—Ç?*\n\n" +
                           "1) –ü–∏—à–∏—Ç–µ üëâ @kr1zzly2150 :\n" +
                           "‚Ä¢ —Ä–µ–∂–∏–º (–º–º / —Å–æ—é–∑–Ω–∏–∫–∏);\n" +
                           "‚Ä¢ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∑–≤–∞–Ω–∏–µ;\n" +
                           "‚Ä¢ –∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å;\n" +
                           "2) –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –±—É—Å—Ç;\n" +
                           "3) –°–∫–∏–¥—ã–≤–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ\n\n" +
                           "*–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∏–¥—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –±—É—Å—Ç —á–µ—Ä–µ–∑ –ª–æ–±–±–∏ —Å—Ç–æ–∏—Ç –≤ 2 –†–ê–ó–ê –î–û–†–û–ñ–ï*‚ùó\n\n" +
                           "‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ‚îÅ‚îÄ";

            var buttons = new[]
            {
                new[] { InlineKeyboardButton.WithCallbackData("üõí –ö—É–ø–∏—Ç—å", "buy_now") },
                new[] { InlineKeyboardButton.WithCallbackData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "back_to_main") }
            };

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: priceText,
                parseMode: ParseMode.Markdown,
                replyMarkup: new InlineKeyboardMarkup(buttons),
                cancellationToken: cancellationToken);
        }

        private static async Task ProcessMMRInput(ITelegramBotClient botClient, long chatId, string text, UserState userState, CancellationToken cancellationToken)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            if (!int.TryParse(text, out int mmr))
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!*\n\n" +
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –±—É–∫–≤, —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —ç–º–æ–¥–∑–∏.\n\n" +
                         "üìù *–ü—Ä–∏–º–µ—Ä:* 1250",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω MMR
            if (mmr < 0)
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR!*\n\n" +
                         "MMR –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.\n\n" +
                         "üìä *–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:* –æ—Ç 0 –¥–æ 2100",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            if (mmr > 2100)
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç MMR!*\n\n" +
                         "–ù–∞—à –±—É—Å—Ç-—Å–µ—Ä–≤–∏—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±—É—Å—Ç —Ç–æ–ª—å–∫–æ –¥–æ 2100 MMR.\n\n" +
                         "üìä *–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:* –æ—Ç 0 –¥–æ 2100",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º MMR –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∑–≤–∞–Ω–∏—è
            userState.CurrentMMR = mmr;
            userState.CurrentState = UserStateState.ChoosingRank;

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: $"‚úÖ *–í–∞—à —Ç–µ–∫—É—â–∏–π MMR: {mmr} –ø—Ä–∏–Ω—è—Ç!*\n\n" +
                     "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∑–≤–∞–Ω–∏–µ:",
                parseMode: ParseMode.Markdown,
                replyMarkup: GetBronzeRanksKeyboard(),
                cancellationToken: cancellationToken);
        }

        private static async Task ProcessIDInput(ITelegramBotClient botClient, long chatId, string text, UserState userState, CancellationToken cancellationToken)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if (!long.TryParse(text, out long playerId))
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥!*\n\n" +
                         "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –±—É–∫–≤, —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —ç–º–æ–¥–∑–∏.\n\n" +
                         "üìù *–ü—Ä–∏–º–µ—Ä:* 51345522",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É ID
            if (text.Length < 8 || text.Length > 9)
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ ID!*\n\n" +
                         "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä.\n\n" +
                         "üìù *–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID:* 51345522 (8 —Ü–∏—Ñ—Ä) –∏–ª–∏ 513455221 (9 —Ü–∏—Ñ—Ä)",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            userState.PlayerID = playerId;
            userState.CurrentState = UserStateState.Confirmation;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            var confirmationText = "üìã *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*\n\n" +
                                 $"üéÆ *–†–µ–∂–∏–º:* {userState.SelectedMode}\n" +
                                 $"üìä *–¢–µ–∫—É—â–∏–π MMR:* {userState.CurrentMMR}\n" +
                                 $"‚≠ê *–ñ–µ–ª–∞–µ–º–æ–µ –∑–≤–∞–Ω–∏–µ:* {userState.DesiredRank}\n" +
                                 $"üÜî *ID –∞–∫–∫–∞—É–Ω—Ç–∞:* {userState.PlayerID}\n\n" +
                                 "–í—Å—ë –≤–µ—Ä–Ω–æ?";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: confirmationText,
                parseMode: ParseMode.Markdown,
                replyMarkup: GetConfirmationKeyboard(),
                cancellationToken: cancellationToken);
        }

        private static async Task HandleCallbackQuery(ITelegramBotClient botClient, CallbackQuery callbackQuery, CancellationToken cancellationToken)
        {
            var data = callbackQuery.Data;
            var chatId = callbackQuery.Message.Chat.Id;
            var messageId = callbackQuery.Message.MessageId;

            try
            {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                if (data.StartsWith("take_order_"))
                {
                    await HandleTakeOrder(botClient, callbackQuery, data, cancellationToken);
                }
                else if (data.StartsWith("complete_order_"))
                {
                    await HandleCompleteOrder(botClient, callbackQuery, data, cancellationToken);
                }
                else if (data.StartsWith("confirm_close_"))
                {
                    await HandleConfirmClose(botClient, callbackQuery, data, cancellationToken);
                }
                else if (data.StartsWith("close_order_"))
                {
                    await HandleCloseOrder(botClient, callbackQuery, data, cancellationToken);
                }
                else if (data.StartsWith("cancel_close_"))
                {
                    await botClient.DeleteMessageAsync(chatId, messageId, cancellationToken);
                }
                else
                {
                    switch (data)
                    {
                        case "back_to_main":
                            await botClient.DeleteMessageAsync(chatId, messageId, cancellationToken);
                            await SendWelcomeMessage(botClient, chatId, cancellationToken);
                            break;

                        case "buy_now":
                            await botClient.EditMessageTextAsync(
                                chatId: chatId,
                                messageId: messageId,
                                text: "üéÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:*",
                                parseMode: ParseMode.Markdown,
                                replyMarkup: GetModeSelectKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "mode_comp":
                        case "mode_allies":
                        case "mode_duels":
                            var modeName = data switch
                            {
                                "mode_comp" => "–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π [5x5]",
                                "mode_allies" => "–°–æ—é–∑–Ω–∏–∫–∏ [2x2]",
                                "mode_duels" => "–î—É—ç–ª–∏ [1x1]",
                                _ => "–†–µ–∂–∏–º"
                            };

                            if (!UserStates.ContainsKey(chatId))
                                UserStates[chatId] = new UserState();

                            UserStates[chatId].SelectedMode = modeName;
                            UserStates[chatId].CurrentState = UserStateState.WaitingForMMR;

                            await botClient.EditMessageTextAsync(
                                chatId: chatId,
                                messageId: messageId,
                                text: $"üéØ *–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {modeName}*\n\n" +
                                     "üìä *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR:*\n\n" +
                                     "‚ÑπÔ∏è MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 2100\n" +
                                     "üìù *–ü—Ä–∏–º–µ—Ä:* 1250",
                                parseMode: ParseMode.Markdown,
                                cancellationToken: cancellationToken);
                            break;

                        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–≤–∞–Ω–∏—è–º
                        case "ranks_next_silver":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetSilverRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "ranks_next_gold":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetGoldRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "ranks_next_higher":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetHigherRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "ranks_prev_bronze":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetBronzeRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "ranks_prev_silver":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetSilverRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        case "ranks_prev_gold":
                            await botClient.EditMessageReplyMarkupAsync(
                                chatId: chatId,
                                messageId: messageId,
                                replyMarkup: GetGoldRanksKeyboard(),
                                cancellationToken: cancellationToken);
                            break;

                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–≤–∞–Ω–∏—è
                        case string s when s.StartsWith("rank_"):
                            var rankName = data switch
                            {
                                "rank_bronze1" => "–ë—Ä–æ–Ω–∑–∞ 1",
                                "rank_bronze2" => "–ë—Ä–æ–Ω–∑–∞ 2",
                                "rank_bronze3" => "–ë—Ä–æ–Ω–∑–∞ 3",
                                "rank_bronze4" => "–ë—Ä–æ–Ω–∑–∞ 4",
                                "rank_silver1" => "–°–µ—Ä–µ–±—Ä–æ 1",
                                "rank_silver2" => "–°–µ—Ä–µ–±—Ä–æ 2",
                                "rank_silver3" => "–°–µ—Ä–µ–±—Ä–æ 3",
                                "rank_silver4" => "–°–µ—Ä–µ–±—Ä–æ 4",
                                "rank_gold1" => "–ó–æ–ª–æ—Ç–æ 1",
                                "rank_gold2" => "–ó–æ–ª–æ—Ç–æ 2",
                                "rank_gold3" => "–ó–æ–ª–æ—Ç–æ 3",
                                "rank_gold4" => "–ó–æ–ª–æ—Ç–æ 4",
                                "rank_phoenix" => "–§–µ–Ω–∏–∫—Å",
                                "rank_ranger" => "–†–µ–Ω–∂–µ—Ä",
                                "rank_champion" => "–ß–µ–º–ø–∏–æ–Ω",
                                "rank_master" => "–ú–∞—Å—Ç–µ—Ä",
                                "rank_elite" => "–≠–ª–∏—Ç–∞",
                                "rank_legend" => "–õ–µ–≥–µ–Ω–¥–∞",
                                _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–≤–∞–Ω–∏–µ"
                            };

                            if (UserStates.ContainsKey(chatId))
                            {
                                UserStates[chatId].DesiredRank = rankName;
                                UserStates[chatId].CurrentState = UserStateState.WaitingForID;

                                await botClient.EditMessageTextAsync(
                                    chatId: chatId,
                                    messageId: messageId,
                                    text: $"‚úÖ *–í—ã–±—Ä–∞–Ω–æ –∑–≤–∞–Ω–∏–µ: {rankName}*\n\n" +
                                         "üÜî *–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–π ID:*\n\n" +
                                         "‚ÑπÔ∏è ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 8 –∏–ª–∏ 9 —Ü–∏—Ñ—Ä\n" +
                                         "üìù *–ü—Ä–∏–º–µ—Ä:* 51345522",
                                    parseMode: ParseMode.Markdown,
                                    cancellationToken: cancellationToken);
                            }
                            break;

                        case "confirm_yes":
                            await ProcessOrderConfirmation(botClient, chatId, cancellationToken);
                            break;

                        case "confirm_no":
                            if (UserStates.ContainsKey(chatId))
                            {
                                UserStates[chatId].CurrentState = UserStateState.MainMenu;
                            }

                            await botClient.EditMessageTextAsync(
                                chatId: chatId,
                                messageId: messageId,
                                text: "‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.*\n\n" +
                                     "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!",
                                parseMode: ParseMode.Markdown,
                                cancellationToken: cancellationToken);
                            break;

                        default:
                            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", cancellationToken: cancellationToken);
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞: {ex.Message}");
            }

            await botClient.AnswerCallbackQueryAsync(callbackQuery.Id, cancellationToken: cancellationToken);
        }

        private static async Task ProcessOrderConfirmation(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
        {
            if (!UserStates.ContainsKey(chatId) || UserStates[chatId].CurrentMMR == null ||
                string.IsNullOrEmpty(UserStates[chatId].DesiredRank) || UserStates[chatId].PlayerID == null)
            {
                await botClient.SendTextMessageAsync(chatId, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", cancellationToken: cancellationToken);
                return;
            }

            var userState = UserStates[chatId];
            var orderNumber = DateTime.Now.ToString("yyyyMMddHHmmss");
            var orderDate = DateTime.Now;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
            var orderData = new OrderData
            {
                OrderNumber = orderNumber,
                CustomerId = chatId,
                CustomerUsername = userState.UserName,
                SelectedMode = userState.SelectedMode!,
                CurrentMMR = userState.CurrentMMR.Value,
                DesiredRank = userState.DesiredRank!,
                PlayerID = userState.PlayerID.Value,
                OrderDate = orderDate
            };

            OrderManager.Orders[orderNumber] = orderData;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
            var orderText = $@"üéØ *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{orderNumber}* üéØ
üìÖ *–î–∞—Ç–∞:* {orderDate:dd.MM.yyyy HH:mm}

üë§ *–ü–û–ö–£–ü–ê–¢–ï–õ–¨:*
‚îú‚îÄ –ò–º—è: {(string.IsNullOrEmpty(userState.UserName) ? "–ù–µ —É–∫–∞–∑–∞–Ω–æ" : $"@{userState.UserName}")}
‚îî‚îÄ ID: `{chatId}`

üéÆ *–î–ê–ù–ù–´–ï –ó–ê–ö–ê–ó–ê:*
‚îú‚îÄ –†–µ–∂–∏–º: {userState.SelectedMode}
‚îú‚îÄ –¢–µ–∫—É—â–∏–π MMR: {userState.CurrentMMR}
‚îú‚îÄ –ñ–µ–ª–∞–µ–º–æ–µ –∑–≤–∞–Ω–∏–µ: {userState.DesiredRank}
‚îî‚îÄ ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{userState.PlayerID}`

‚è∞ *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {orderDate:HH:mm:ss}
üìä *–°—Ç–∞—Ç—É—Å:* üÜï –ù–û–í–´–ô";

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
            var orderKeyboard = new InlineKeyboardMarkup(new[]
            {
        new[]
        {
            InlineKeyboardButton.WithCallbackData("‚úÖ –í–ó–Ø–¢–¨ –í –†–ê–ë–û–¢–£", $"take_order_{orderNumber}")
        },
        new[]
        {
            InlineKeyboardButton.WithUrl("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", $"tg://user?id={chatId}")
        }
    });

            try
            {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
                var groupMessage = await botClient.SendTextMessageAsync(
                    chatId: OrdersGroupId,
                    text: orderText,
                    parseMode: ParseMode.Markdown,
                    replyMarkup: orderKeyboard,
                    cancellationToken: cancellationToken);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º
                OrderManager.MessageToOrderMap[groupMessage.MessageId] = orderNumber;

                Console.WriteLine($"‚úÖ –ó–∞–∫–∞–∑ #{orderNumber} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {ex.Message}");

                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ö†Ô∏è *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!*\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @krizzly2150",
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
                return;
            }

            // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            var userMessage = $@"‚úÖ *–ó–ê–ö–ê–ó #{orderNumber} –û–§–û–†–ú–õ–ï–ù!* üéâ

üìã *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*
‚îú‚îÄ –†–µ–∂–∏–º: {userState.SelectedMode}
‚îú‚îÄ –¢–µ–∫—É—â–∏–π MMR: {userState.CurrentMMR}
‚îú‚îÄ –ñ–µ–ª–∞–µ–º–æ–µ –∑–≤–∞–Ω–∏–µ: {userState.DesiredRank}
‚îî‚îÄ ID –∞–∫–∫–∞—É–Ω—Ç–∞: `{userState.PlayerID}`

‚è≥ *–ü—Ä–æ–¥–∞–≤–µ—Ü —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø–ª–∞—Ç—ã!*

üí° *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–≥–¥–∞ –≤–∞–º –Ω–∞–ø–∏—à—É—Ç!*";

            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: userMessage,
                parseMode: ParseMode.Markdown,
                cancellationToken: cancellationToken);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userState.CurrentState = UserStateState.MainMenu;
            userState.CurrentMMR = null;
            userState.DesiredRank = null;
            userState.PlayerID = null;
            userState.SelectedMode = null;
        }
        private static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                ApiRequestException apiRequestException
                    => $"Telegram API Error: [{apiRequestException.ErrorCode}] {apiRequestException.Message}",
                _ => exception.ToString()
            };

            Console.WriteLine($"–û—à–∏–±–∫–∞: {errorMessage}");
            return Task.CompletedTask;
        }

        public class BotService : IHostedService
        {
            private readonly ITelegramBotClient _botClient;
            private CancellationTokenSource? _cts;

            public BotService(ITelegramBotClient botClient)
            {
                _botClient = botClient;
            }

            public async Task StartAsync(CancellationToken cancellationToken)
            {
                _cts = new CancellationTokenSource();

                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = Array.Empty<UpdateType>()
                };

                _botClient.StartReceiving(
                    updateHandler: HandleUpdateAsync,
                    pollingErrorHandler: HandlePollingErrorAsync,
                    receiverOptions: receiverOptions,
                    cancellationToken: _cts.Token
                );

                var me = await _botClient.GetMeAsync(cancellationToken);
                Console.WriteLine($"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.Username}");
                Console.WriteLine("üìç –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!");
            }

            public Task StopAsync(CancellationToken cancellationToken)
            {
                _cts?.Cancel();
                return Task.CompletedTask;
            }
        }

        public class UserState
        {
            public UserStateState CurrentState { get; set; } = UserStateState.MainMenu;
            public string? SelectedMode { get; set; }
            public int? CurrentMMR { get; set; }
            public string? DesiredRank { get; set; }
            public long? PlayerID { get; set; }
            public string? UserName { get; set; }
        }

        public enum UserStateState
        {
            MainMenu,
            WaitingForMMR,
            ChoosingRank,
            WaitingForID,
            Confirmation
        }
    }
}

